{"version":3,"sources":["components/SiteContext.js","utils/fetchData.js","components/StudentCard.js","components/Students.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["SiteContext","React","createContext","students","undefined","projects","updateData","SiteConsumer","Consumer","SiteProvider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","type","data","setState","defineProperty","sort","_compare","a","b","nameA","name","split","nameB","aLastName","bLastName","inherits","createClass","key","value","react_default","createElement","Provider","props","children","Component","client","contentful","space","accessToken","fetchData","getEntries","content_type","then","entries","result","items","forEach","entry","fields","push","StudentCard","_ref","className","Students","fetchStudentsData","_callee","regenerator_default","wrap","_context","prev","next","sent","stop","map","student","components_StudentCard","components_Students","_ref2","Students_Students","App","SiteContext_SiteProvider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9c17d2a8.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nconst SiteContext = React.createContext({\r\n  students: undefined,\r\n  projects: undefined,\r\n  updateData: () => null\r\n})\r\n\r\nexport const SiteConsumer = SiteContext.Consumer\r\n\r\nexport class SiteProvider extends Component {\r\n  state = {\r\n    students: undefined,\r\n    projects: undefined\r\n  }\r\n\r\n  updateData = (type, data) =>{\r\n      this.setState({\r\n        [type]: data.sort(this._compare)\r\n      })\r\n  }\r\n\r\n  _compare = (a, b) => {\r\n    let nameA = a.name.split(\" \")\r\n    let nameB = b.name.split(\" \")\r\n    let aLastName = nameA[nameA.length - 1]\r\n    let bLastName = nameB[nameB.length - 2]\r\n\r\n    if(aLastName < bLastName) return -1\r\n    if(aLastName > bLastName) return 1\r\n\r\n    return 0\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <SiteContext.Provider\r\n        value={{\r\n          students: this.state.students,\r\n          projects: this.state.projects,\r\n          updateData: this.updateData\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </SiteContext.Provider>\r\n    )\r\n  }\r\n}\r\n","import * as contentful from 'contentful';\r\n\r\nvar client = contentful.createClient({\r\n  space: 'y8itg9n71h1r',\r\n  accessToken: '8be336497be9ea1542bc33c39e576e94e2c050bb2b0e735e8cbb3f05f7d74ae0'\r\n})\r\n\r\nexport const fetchData = type => {\r\n  return client.getEntries({content_type: type})\r\n    .then(entries => {\r\n      let result = []\r\n      entries.items.forEach(entry => {\r\n        if(entry.fields) {\r\n          result.push(entry.fields)\r\n        }\r\n      })\r\n      return result\r\n    })\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../styles/students.css';\r\n\r\nconst StudentCard = ({name}) => (\r\n  <div className='student-card'>\r\n    <h1>{name}</h1>\r\n  </div>\r\n)\r\n\r\nexport default StudentCard\r\n","import React, { Component } from 'react';\r\nimport {SiteConsumer} from './SiteContext'\r\nimport {fetchData} from '../utils/fetchData'\r\nimport StudentCard from './StudentCard'\r\n\r\nclass Students extends Component {\r\n\r\n  componentDidMount(){\r\n    this.fetchStudentsData()\r\n  }\r\n\r\n  fetchStudentsData = async () => {\r\n    const data = await fetchData('students')\r\n    this.props.updateData('students', data)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"students\">\r\n          {this.props.data&&\r\n            this.props.data.map((student, key) => (\r\n              <StudentCard name={student.name} key={key}/>\r\n            ))\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default () => (\r\n  <SiteConsumer>\r\n    {({students, updateData}) => (\r\n      <Students data={students} updateData={updateData}/>\r\n    )}\r\n  </SiteConsumer>\r\n)\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {SiteProvider} from './components/SiteContext'\nimport Students from './components/Students'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <SiteProvider>\n        <div className=\"app\">\n          <Students/>\n        </div>\n      </SiteProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}